# -*- coding: utf-8 -*-
"""RainS-TECH Rainfall Dashboard

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1f77eVR5I79YBEQzuSQwpXZJAOn4ulW8Y

# Importing Python Libraries
"""

# Installing libraries
!pip install jupyter_bokeh
!pip install hvplot

# To get data from external files
import numpy as np
import pandas as pd

# To plot the data
import matplotlib.pyplot as plt
import seaborn as sns
import panel as pn
pn.extension('tabulator')
import hvplot.pandas
import holoviews as hv
from bokeh.models import HoverTool

# To use basic math properties
import math

"""# Importing and Filtering Data"""

# Importing Data
data = pd.read_csv("default data.csv")
## choice 1: user input <- picked
## choice 2: dropdown, link to database

# Inspecting Data
print(data.head())
print(data.tail())

# Inital Statistics of the Data
data.loc[data['RAINFALL']=='T','RAINFALL'] = 0
data.loc[data['RAINFALL']=='-','RAINFALL'] = 0
data['RAINFALL'] = data['RAINFALL'].apply(float)
data.loc[data['RAINFALL']<0,'RAINFALL'] = 0

print('\n-----------------------------------------------------------')
print(f'YEAR RANGE: {data[["YEAR"]].min().iloc[0]} - {data[["YEAR"]].max().iloc[0]}')
print(data[['RAINFALL']].describe())

"""# Yearly Rainfall Trend"""

# Converting to Annual Data, milimeters to meters
data_a = data.groupby('YEAR')['RAINFALL'].sum()/1000
rf_a = data_a.values
color_a = [{r==rf_a.min():'#85C1E9',
            rf_a.min()<r<rf_a.max():'#3498DB',
            r==rf_a.max():'#1F618D'}[True] for r in rf_a]

data_a = pd.DataFrame({'RAINFALL':data_a.values},index=data_a.index)
data_a['color'] = color_a
data_a['MEDIAN_DIFF'] = data_a['RAINFALL'] - \
  data_a['RAINFALL'].median()
data_a['color_diff'] = [{r<0:'red',0<=r:'green'}[True] for r
                        in data_a['MEDIAN_DIFF'].values]
data_a['MED_DIFF_C'] = data_a['MEDIAN_DIFF'].cumsum()
df_a = data_a.interactive

plot1_a = df_a.hvplot.bar(
    x='YEAR',
    y='RAINFALL',
    xlabel='Year',
    ylabel='',
    color='#3498DB',
    title='Rainfall per Year',
    width=700, height=500)

plot1_a

hover_tool = HoverTool(
    tooltips=[('Year','@YEAR'),
     ('Rainfall','@RAINFALL m' )]
)

plot2_a = df_a.hvplot.bar(
    x='YEAR',
    y='RAINFALL',
    xlabel='Year',
    ylabel='',
    color='color',
    title='Rainfall per Year',
    width=700, height=500).opts(
        tools=[hover_tool]
    )

hline = hv.HLine(data_a['RAINFALL'].median()).opts(
        color='black',
        line_dash='dashed')
plot2_a * hline

median = data_a['RAINFALL'].median()
print(f"MEDIAN: {round(median,3)} meters")

hover_tool = HoverTool(
    tooltips=[('Year','@YEAR'),
     ('Difference to Median','@MEDIAN_DIFF{0.0000} m' )]
)

plot3_a = df_a.hvplot.bar(
    x='YEAR',
    y='MEDIAN_DIFF',
    xlabel='Year',
    ylabel='',
    color='color_diff',
    title='Difference to Median Rainfall',
    width=700, height=500).opts(
        tools=[hover_tool]
    )

hline = hv.HLine(0).opts(
        color='black')
plot3_a

"""# Monthly Rainfall Trend"""

# Converting to Monthly Rainfall, milimeters to centimeters
data_m = data.groupby(['YEAR','MONTH'])['RAINFALL'].sum()/10
data_m_unstacked = data_m.unstack(level=0)

# Making data interactive
df_m = data_m_unstacked.interactive

# Plotting the Data
hover_tool = HoverTool(
    tooltips=[('Year','@columns'),
     ('Month','@index'),
      ('Rainfall','@value cm')]
)

plot_m = df_m.hvplot.heatmap(
    x='columns',
    y='index',
    title='Monthly Rainfall in centimeters',
    rot=70,
    xlabel='Year',
    ylabel='Month',
    width=600, height = 400).opts(
        tools=[hover_tool],
        invert_yaxis=True
    )

plot_m

# Showing the Statistics per Year
print(data_m_unstacked.describe())

"""# Daily Rainfall Statistics"""

# Arranging the Rainfall Values in Increasing Order
rainfall_values = pd.DataFrame({'RAINFALL':data['RAINFALL'].values})
rainfall_values = rainfall_values.sort_values(by='RAINFALL',ignore_index=True)

# Getting the Plotting Position
rainfall_values['POSITION'] = list(range(1,rainfall_values.count().iloc[0]+1,1))\
/(rainfall_values.count().iloc[0]+1)

df = rainfall_values
idf = df.interactive
rf_stats = idf.hvplot.line(
    x='RAINFALL',
    y='POSITION',
    width=700,height=700
).opts(tools=['crosshair','hover'])

rf_stats

"""# Creating the Dashboard"""

template = pn.template.FastListTemplate(
     title='Rainfall Analysis',
     sidebar=[pn.pane.Markdown("Lorem Ipsum")],
     main=[pn.Row(plot_m)]
 )

# template.servable();